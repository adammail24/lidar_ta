// Generated by gencpp from file robot_abu/js.msg
// DO NOT EDIT!


#ifndef ROBOT_ABU_MESSAGE_JS_H
#define ROBOT_ABU_MESSAGE_JS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_abu
{
template <class ContainerAllocator>
struct js_
{
  typedef js_<ContainerAllocator> Type;

  js_()
    : button(0)
    , left_js_x(0)
    , left_js_y(0)
    , right_js_x(0)
    , right_js_y(0)
    , kiri_kanan(0)
    , atas_bawah(0)
    , l2(0)
    , r2(0)
    , event(0)  {
    }
  js_(const ContainerAllocator& _alloc)
    : button(0)
    , left_js_x(0)
    , left_js_y(0)
    , right_js_x(0)
    , right_js_y(0)
    , kiri_kanan(0)
    , atas_bawah(0)
    , l2(0)
    , r2(0)
    , event(0)  {
  (void)_alloc;
    }



   typedef uint32_t _button_type;
  _button_type button;

   typedef int32_t _left_js_x_type;
  _left_js_x_type left_js_x;

   typedef int32_t _left_js_y_type;
  _left_js_y_type left_js_y;

   typedef uint16_t _right_js_x_type;
  _right_js_x_type right_js_x;

   typedef uint16_t _right_js_y_type;
  _right_js_y_type right_js_y;

   typedef int16_t _kiri_kanan_type;
  _kiri_kanan_type kiri_kanan;

   typedef int16_t _atas_bawah_type;
  _atas_bawah_type atas_bawah;

   typedef int32_t _l2_type;
  _l2_type l2;

   typedef int32_t _r2_type;
  _r2_type r2;

   typedef uint8_t _event_type;
  _event_type event;





  typedef boost::shared_ptr< ::robot_abu::js_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_abu::js_<ContainerAllocator> const> ConstPtr;

}; // struct js_

typedef ::robot_abu::js_<std::allocator<void> > js;

typedef boost::shared_ptr< ::robot_abu::js > jsPtr;
typedef boost::shared_ptr< ::robot_abu::js const> jsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_abu::js_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_abu::js_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_abu::js_<ContainerAllocator1> & lhs, const ::robot_abu::js_<ContainerAllocator2> & rhs)
{
  return lhs.button == rhs.button &&
    lhs.left_js_x == rhs.left_js_x &&
    lhs.left_js_y == rhs.left_js_y &&
    lhs.right_js_x == rhs.right_js_x &&
    lhs.right_js_y == rhs.right_js_y &&
    lhs.kiri_kanan == rhs.kiri_kanan &&
    lhs.atas_bawah == rhs.atas_bawah &&
    lhs.l2 == rhs.l2 &&
    lhs.r2 == rhs.r2 &&
    lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_abu::js_<ContainerAllocator1> & lhs, const ::robot_abu::js_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_abu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_abu::js_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_abu::js_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_abu::js_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_abu::js_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_abu::js_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_abu::js_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_abu::js_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27307fc51b0d7a911c746c6fbd3def00";
  }

  static const char* value(const ::robot_abu::js_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27307fc51b0d7a91ULL;
  static const uint64_t static_value2 = 0x1c746c6fbd3def00ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_abu::js_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_abu/js";
  }

  static const char* value(const ::robot_abu::js_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_abu::js_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 button\n"
"int32 left_js_x\n"
"int32 left_js_y\n"
"uint16 right_js_x\n"
"uint16 right_js_y\n"
"int16 kiri_kanan\n"
"int16 atas_bawah\n"
"int32 l2\n"
"int32 r2\n"
"uint8 event\n"
;
  }

  static const char* value(const ::robot_abu::js_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_abu::js_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button);
      stream.next(m.left_js_x);
      stream.next(m.left_js_y);
      stream.next(m.right_js_x);
      stream.next(m.right_js_y);
      stream.next(m.kiri_kanan);
      stream.next(m.atas_bawah);
      stream.next(m.l2);
      stream.next(m.r2);
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct js_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_abu::js_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_abu::js_<ContainerAllocator>& v)
  {
    s << indent << "button: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.button);
    s << indent << "left_js_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_js_x);
    s << indent << "left_js_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_js_y);
    s << indent << "right_js_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_js_x);
    s << indent << "right_js_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_js_y);
    s << indent << "kiri_kanan: ";
    Printer<int16_t>::stream(s, indent + "  ", v.kiri_kanan);
    s << indent << "atas_bawah: ";
    Printer<int16_t>::stream(s, indent + "  ", v.atas_bawah);
    s << indent << "l2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l2);
    s << indent << "r2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r2);
    s << indent << "event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ABU_MESSAGE_JS_H
