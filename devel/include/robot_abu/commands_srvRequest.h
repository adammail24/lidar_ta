// Generated by gencpp from file robot_abu/commands_srvRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_ABU_MESSAGE_COMMANDS_SRVREQUEST_H
#define ROBOT_ABU_MESSAGE_COMMANDS_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_abu
{
template <class ContainerAllocator>
struct commands_srvRequest_
{
  typedef commands_srvRequest_<ContainerAllocator> Type;

  commands_srvRequest_()
    : mission_counter(0)
    , ask(0)  {
    }
  commands_srvRequest_(const ContainerAllocator& _alloc)
    : mission_counter(0)
    , ask(0)  {
  (void)_alloc;
    }



   typedef int8_t _mission_counter_type;
  _mission_counter_type mission_counter;

   typedef int16_t _ask_type;
  _ask_type ask;





  typedef boost::shared_ptr< ::robot_abu::commands_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_abu::commands_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct commands_srvRequest_

typedef ::robot_abu::commands_srvRequest_<std::allocator<void> > commands_srvRequest;

typedef boost::shared_ptr< ::robot_abu::commands_srvRequest > commands_srvRequestPtr;
typedef boost::shared_ptr< ::robot_abu::commands_srvRequest const> commands_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_abu::commands_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_abu::commands_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_abu::commands_srvRequest_<ContainerAllocator1> & lhs, const ::robot_abu::commands_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mission_counter == rhs.mission_counter &&
    lhs.ask == rhs.ask;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_abu::commands_srvRequest_<ContainerAllocator1> & lhs, const ::robot_abu::commands_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_abu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_abu::commands_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_abu::commands_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_abu::commands_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01a849e291c6457a0413eaabe3e816d4";
  }

  static const char* value(const ::robot_abu::commands_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01a849e291c6457aULL;
  static const uint64_t static_value2 = 0x0413eaabe3e816d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_abu/commands_srvRequest";
  }

  static const char* value(const ::robot_abu::commands_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 mission_counter\n"
"int16 ask\n"
;
  }

  static const char* value(const ::robot_abu::commands_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_counter);
      stream.next(m.ask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct commands_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_abu::commands_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_abu::commands_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "mission_counter: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mission_counter);
    s << indent << "ask: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ABU_MESSAGE_COMMANDS_SRVREQUEST_H
