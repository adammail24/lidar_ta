// Generated by gencpp from file robot_abu/surface_to_laptop.msg
// DO NOT EDIT!


#ifndef ROBOT_ABU_MESSAGE_SURFACE_TO_LAPTOP_H
#define ROBOT_ABU_MESSAGE_SURFACE_TO_LAPTOP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_abu
{
template <class ContainerAllocator>
struct surface_to_laptop_
{
  typedef surface_to_laptop_<ContainerAllocator> Type;

  surface_to_laptop_()
    : speed_x(0)
    , speed_y(0)
    , speed_z(0)
    , odom_x(0.0)
    , odom_y(0.0)
    , gyro_full(0.0)
    , target_speed_x(0)
    , target_speed_y(0)
    , target_speed_z(0)
    , laser(0.0)
    , laser_hpf(0.0)
    , command_type(0)
    , m_ctr(0)
    , time_stamp(0.0)  {
    }
  surface_to_laptop_(const ContainerAllocator& _alloc)
    : speed_x(0)
    , speed_y(0)
    , speed_z(0)
    , odom_x(0.0)
    , odom_y(0.0)
    , gyro_full(0.0)
    , target_speed_x(0)
    , target_speed_y(0)
    , target_speed_z(0)
    , laser(0.0)
    , laser_hpf(0.0)
    , command_type(0)
    , m_ctr(0)
    , time_stamp(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _speed_x_type;
  _speed_x_type speed_x;

   typedef int16_t _speed_y_type;
  _speed_y_type speed_y;

   typedef int16_t _speed_z_type;
  _speed_z_type speed_z;

   typedef float _odom_x_type;
  _odom_x_type odom_x;

   typedef float _odom_y_type;
  _odom_y_type odom_y;

   typedef float _gyro_full_type;
  _gyro_full_type gyro_full;

   typedef int16_t _target_speed_x_type;
  _target_speed_x_type target_speed_x;

   typedef int16_t _target_speed_y_type;
  _target_speed_y_type target_speed_y;

   typedef int16_t _target_speed_z_type;
  _target_speed_z_type target_speed_z;

   typedef float _laser_type;
  _laser_type laser;

   typedef float _laser_hpf_type;
  _laser_hpf_type laser_hpf;

   typedef int8_t _command_type_type;
  _command_type_type command_type;

   typedef int16_t _m_ctr_type;
  _m_ctr_type m_ctr;

   typedef float _time_stamp_type;
  _time_stamp_type time_stamp;





  typedef boost::shared_ptr< ::robot_abu::surface_to_laptop_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_abu::surface_to_laptop_<ContainerAllocator> const> ConstPtr;

}; // struct surface_to_laptop_

typedef ::robot_abu::surface_to_laptop_<std::allocator<void> > surface_to_laptop;

typedef boost::shared_ptr< ::robot_abu::surface_to_laptop > surface_to_laptopPtr;
typedef boost::shared_ptr< ::robot_abu::surface_to_laptop const> surface_to_laptopConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_abu::surface_to_laptop_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_abu::surface_to_laptop_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_abu::surface_to_laptop_<ContainerAllocator1> & lhs, const ::robot_abu::surface_to_laptop_<ContainerAllocator2> & rhs)
{
  return lhs.speed_x == rhs.speed_x &&
    lhs.speed_y == rhs.speed_y &&
    lhs.speed_z == rhs.speed_z &&
    lhs.odom_x == rhs.odom_x &&
    lhs.odom_y == rhs.odom_y &&
    lhs.gyro_full == rhs.gyro_full &&
    lhs.target_speed_x == rhs.target_speed_x &&
    lhs.target_speed_y == rhs.target_speed_y &&
    lhs.target_speed_z == rhs.target_speed_z &&
    lhs.laser == rhs.laser &&
    lhs.laser_hpf == rhs.laser_hpf &&
    lhs.command_type == rhs.command_type &&
    lhs.m_ctr == rhs.m_ctr &&
    lhs.time_stamp == rhs.time_stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_abu::surface_to_laptop_<ContainerAllocator1> & lhs, const ::robot_abu::surface_to_laptop_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_abu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_abu::surface_to_laptop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_abu::surface_to_laptop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_abu::surface_to_laptop_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b07eb02f2a67188d7d9858575aca1a0";
  }

  static const char* value(const ::robot_abu::surface_to_laptop_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b07eb02f2a67188ULL;
  static const uint64_t static_value2 = 0xd7d9858575aca1a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_abu/surface_to_laptop";
  }

  static const char* value(const ::robot_abu::surface_to_laptop_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 speed_x\n"
"int16 speed_y\n"
"int16 speed_z\n"
"\n"
"float32 odom_x\n"
"float32 odom_y\n"
"float32 gyro_full\n"
"\n"
"int16 target_speed_x\n"
"int16 target_speed_y\n"
"int16 target_speed_z\n"
"\n"
"float32 laser\n"
"float32 laser_hpf\n"
"\n"
"int8 command_type\n"
"int16 m_ctr\n"
"\n"
"float32 time_stamp\n"
;
  }

  static const char* value(const ::robot_abu::surface_to_laptop_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_x);
      stream.next(m.speed_y);
      stream.next(m.speed_z);
      stream.next(m.odom_x);
      stream.next(m.odom_y);
      stream.next(m.gyro_full);
      stream.next(m.target_speed_x);
      stream.next(m.target_speed_y);
      stream.next(m.target_speed_z);
      stream.next(m.laser);
      stream.next(m.laser_hpf);
      stream.next(m.command_type);
      stream.next(m.m_ctr);
      stream.next(m.time_stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct surface_to_laptop_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_abu::surface_to_laptop_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_abu::surface_to_laptop_<ContainerAllocator>& v)
  {
    s << indent << "speed_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_x);
    s << indent << "speed_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_y);
    s << indent << "speed_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_z);
    s << indent << "odom_x: ";
    Printer<float>::stream(s, indent + "  ", v.odom_x);
    s << indent << "odom_y: ";
    Printer<float>::stream(s, indent + "  ", v.odom_y);
    s << indent << "gyro_full: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_full);
    s << indent << "target_speed_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_speed_x);
    s << indent << "target_speed_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_speed_y);
    s << indent << "target_speed_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_speed_z);
    s << indent << "laser: ";
    Printer<float>::stream(s, indent + "  ", v.laser);
    s << indent << "laser_hpf: ";
    Printer<float>::stream(s, indent + "  ", v.laser_hpf);
    s << indent << "command_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command_type);
    s << indent << "m_ctr: ";
    Printer<int16_t>::stream(s, indent + "  ", v.m_ctr);
    s << indent << "time_stamp: ";
    Printer<float>::stream(s, indent + "  ", v.time_stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ABU_MESSAGE_SURFACE_TO_LAPTOP_H
