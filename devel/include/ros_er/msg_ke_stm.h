// Generated by gencpp from file ros_er/msg_ke_stm.msg
// DO NOT EDIT!


#ifndef ROS_ER_MESSAGE_MSG_KE_STM_H
#define ROS_ER_MESSAGE_MSG_KE_STM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_er
{
template <class ContainerAllocator>
struct msg_ke_stm_
{
  typedef msg_ke_stm_<ContainerAllocator> Type;

  msg_ke_stm_()
    : speed_x(0)
    , speed_y(0)
    , speed_z(0)
    , target_slider(0)
    , speed_slider(0)
    , target_rot(0)
    , speed_rot(0)
    , target_capit(0)
    , speed_capit(0)
    , target_engsel(0)
    , bit_pneumatik(0)
    , status_robot(0)
    , reset_enc(0)
    , reset_gpos_x(0)
    , reset_gpos_y(0)
    , reset_gyro_val(0)
    , buzzer(0)
    , pos_head(0)
    , acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , tilt_kiri(0)
    , tilt_kanan(0)
    , target_carry(0)
    , speed_carry(0)  {
    }
  msg_ke_stm_(const ContainerAllocator& _alloc)
    : speed_x(0)
    , speed_y(0)
    , speed_z(0)
    , target_slider(0)
    , speed_slider(0)
    , target_rot(0)
    , speed_rot(0)
    , target_capit(0)
    , speed_capit(0)
    , target_engsel(0)
    , bit_pneumatik(0)
    , status_robot(0)
    , reset_enc(0)
    , reset_gpos_x(0)
    , reset_gpos_y(0)
    , reset_gyro_val(0)
    , buzzer(0)
    , pos_head(0)
    , acc_x(0)
    , acc_y(0)
    , acc_z(0)
    , tilt_kiri(0)
    , tilt_kanan(0)
    , target_carry(0)
    , speed_carry(0)  {
  (void)_alloc;
    }



   typedef int16_t _speed_x_type;
  _speed_x_type speed_x;

   typedef int16_t _speed_y_type;
  _speed_y_type speed_y;

   typedef int16_t _speed_z_type;
  _speed_z_type speed_z;

   typedef int16_t _target_slider_type;
  _target_slider_type target_slider;

   typedef int16_t _speed_slider_type;
  _speed_slider_type speed_slider;

   typedef int16_t _target_rot_type;
  _target_rot_type target_rot;

   typedef int16_t _speed_rot_type;
  _speed_rot_type speed_rot;

   typedef int16_t _target_capit_type;
  _target_capit_type target_capit;

   typedef int16_t _speed_capit_type;
  _speed_capit_type speed_capit;

   typedef int16_t _target_engsel_type;
  _target_engsel_type target_engsel;

   typedef uint8_t _bit_pneumatik_type;
  _bit_pneumatik_type bit_pneumatik;

   typedef uint8_t _status_robot_type;
  _status_robot_type status_robot;

   typedef uint8_t _reset_enc_type;
  _reset_enc_type reset_enc;

   typedef int16_t _reset_gpos_x_type;
  _reset_gpos_x_type reset_gpos_x;

   typedef int16_t _reset_gpos_y_type;
  _reset_gpos_y_type reset_gpos_y;

   typedef int16_t _reset_gyro_val_type;
  _reset_gyro_val_type reset_gyro_val;

   typedef uint8_t _buzzer_type;
  _buzzer_type buzzer;

   typedef int32_t _pos_head_type;
  _pos_head_type pos_head;

   typedef int16_t _acc_x_type;
  _acc_x_type acc_x;

   typedef int16_t _acc_y_type;
  _acc_y_type acc_y;

   typedef int16_t _acc_z_type;
  _acc_z_type acc_z;

   typedef int8_t _tilt_kiri_type;
  _tilt_kiri_type tilt_kiri;

   typedef int8_t _tilt_kanan_type;
  _tilt_kanan_type tilt_kanan;

   typedef int16_t _target_carry_type;
  _target_carry_type target_carry;

   typedef int16_t _speed_carry_type;
  _speed_carry_type speed_carry;





  typedef boost::shared_ptr< ::ros_er::msg_ke_stm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_er::msg_ke_stm_<ContainerAllocator> const> ConstPtr;

}; // struct msg_ke_stm_

typedef ::ros_er::msg_ke_stm_<std::allocator<void> > msg_ke_stm;

typedef boost::shared_ptr< ::ros_er::msg_ke_stm > msg_ke_stmPtr;
typedef boost::shared_ptr< ::ros_er::msg_ke_stm const> msg_ke_stmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_er::msg_ke_stm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_er::msg_ke_stm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_er::msg_ke_stm_<ContainerAllocator1> & lhs, const ::ros_er::msg_ke_stm_<ContainerAllocator2> & rhs)
{
  return lhs.speed_x == rhs.speed_x &&
    lhs.speed_y == rhs.speed_y &&
    lhs.speed_z == rhs.speed_z &&
    lhs.target_slider == rhs.target_slider &&
    lhs.speed_slider == rhs.speed_slider &&
    lhs.target_rot == rhs.target_rot &&
    lhs.speed_rot == rhs.speed_rot &&
    lhs.target_capit == rhs.target_capit &&
    lhs.speed_capit == rhs.speed_capit &&
    lhs.target_engsel == rhs.target_engsel &&
    lhs.bit_pneumatik == rhs.bit_pneumatik &&
    lhs.status_robot == rhs.status_robot &&
    lhs.reset_enc == rhs.reset_enc &&
    lhs.reset_gpos_x == rhs.reset_gpos_x &&
    lhs.reset_gpos_y == rhs.reset_gpos_y &&
    lhs.reset_gyro_val == rhs.reset_gyro_val &&
    lhs.buzzer == rhs.buzzer &&
    lhs.pos_head == rhs.pos_head &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z &&
    lhs.tilt_kiri == rhs.tilt_kiri &&
    lhs.tilt_kanan == rhs.tilt_kanan &&
    lhs.target_carry == rhs.target_carry &&
    lhs.speed_carry == rhs.speed_carry;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_er::msg_ke_stm_<ContainerAllocator1> & lhs, const ::ros_er::msg_ke_stm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_er

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_er::msg_ke_stm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_er::msg_ke_stm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_er::msg_ke_stm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_er::msg_ke_stm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_er::msg_ke_stm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_er::msg_ke_stm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_er::msg_ke_stm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2633e3a1a163ec7dbfa4502b05291a1";
  }

  static const char* value(const ::ros_er::msg_ke_stm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2633e3a1a163ec7ULL;
  static const uint64_t static_value2 = 0xdbfa4502b05291a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_er::msg_ke_stm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_er/msg_ke_stm";
  }

  static const char* value(const ::ros_er::msg_ke_stm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_er::msg_ke_stm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 speed_x\n"
"int16 speed_y\n"
"int16 speed_z\n"
"\n"
"int16 target_slider\n"
"int16 speed_slider\n"
"\n"
"int16 target_rot\n"
"int16 speed_rot\n"
"\n"
"int16 target_capit\n"
"int16 speed_capit\n"
"\n"
"int16 target_engsel\n"
"\n"
"uint8 bit_pneumatik \n"
"\n"
"uint8 status_robot\n"
"\n"
"uint8 reset_enc\n"
"\n"
"int16 reset_gpos_x\n"
"int16 reset_gpos_y\n"
"\n"
"int16 reset_gyro_val\n"
"\n"
"uint8 buzzer\n"
"\n"
"int32 pos_head\n"
"\n"
"int16 acc_x\n"
"int16 acc_y\n"
"int16 acc_z\n"
"\n"
"int8 tilt_kiri\n"
"int8 tilt_kanan\n"
"\n"
"int16 target_carry\n"
"int16 speed_carry\n"
;
  }

  static const char* value(const ::ros_er::msg_ke_stm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_er::msg_ke_stm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_x);
      stream.next(m.speed_y);
      stream.next(m.speed_z);
      stream.next(m.target_slider);
      stream.next(m.speed_slider);
      stream.next(m.target_rot);
      stream.next(m.speed_rot);
      stream.next(m.target_capit);
      stream.next(m.speed_capit);
      stream.next(m.target_engsel);
      stream.next(m.bit_pneumatik);
      stream.next(m.status_robot);
      stream.next(m.reset_enc);
      stream.next(m.reset_gpos_x);
      stream.next(m.reset_gpos_y);
      stream.next(m.reset_gyro_val);
      stream.next(m.buzzer);
      stream.next(m.pos_head);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.tilt_kiri);
      stream.next(m.tilt_kanan);
      stream.next(m.target_carry);
      stream.next(m.speed_carry);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msg_ke_stm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_er::msg_ke_stm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_er::msg_ke_stm_<ContainerAllocator>& v)
  {
    s << indent << "speed_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_x);
    s << indent << "speed_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_y);
    s << indent << "speed_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_z);
    s << indent << "target_slider: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_slider);
    s << indent << "speed_slider: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_slider);
    s << indent << "target_rot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_rot);
    s << indent << "speed_rot: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_rot);
    s << indent << "target_capit: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_capit);
    s << indent << "speed_capit: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_capit);
    s << indent << "target_engsel: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_engsel);
    s << indent << "bit_pneumatik: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bit_pneumatik);
    s << indent << "status_robot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_robot);
    s << indent << "reset_enc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_enc);
    s << indent << "reset_gpos_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.reset_gpos_x);
    s << indent << "reset_gpos_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.reset_gpos_y);
    s << indent << "reset_gyro_val: ";
    Printer<int16_t>::stream(s, indent + "  ", v.reset_gyro_val);
    s << indent << "buzzer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer);
    s << indent << "pos_head: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos_head);
    s << indent << "acc_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acc_z);
    s << indent << "tilt_kiri: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tilt_kiri);
    s << indent << "tilt_kanan: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tilt_kanan);
    s << indent << "target_carry: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_carry);
    s << indent << "speed_carry: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed_carry);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ER_MESSAGE_MSG_KE_STM_H
