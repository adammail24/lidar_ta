// Generated by gencpp from file rosRR_2023/lidar_aimResponse.msg
// DO NOT EDIT!


#ifndef ROSRR_2023_MESSAGE_LIDAR_AIMRESPONSE_H
#define ROSRR_2023_MESSAGE_LIDAR_AIMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosRR_2023
{
template <class ContainerAllocator>
struct lidar_aimResponse_
{
  typedef lidar_aimResponse_<ContainerAllocator> Type;

  lidar_aimResponse_()
    : angle_error(0.0)
    , dist(0.0)
    , success(false)  {
    }
  lidar_aimResponse_(const ContainerAllocator& _alloc)
    : angle_error(0.0)
    , dist(0.0)
    , success(false)  {
  (void)_alloc;
    }



   typedef float _angle_error_type;
  _angle_error_type angle_error;

   typedef float _dist_type;
  _dist_type dist;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> const> ConstPtr;

}; // struct lidar_aimResponse_

typedef ::rosRR_2023::lidar_aimResponse_<std::allocator<void> > lidar_aimResponse;

typedef boost::shared_ptr< ::rosRR_2023::lidar_aimResponse > lidar_aimResponsePtr;
typedef boost::shared_ptr< ::rosRR_2023::lidar_aimResponse const> lidar_aimResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator1> & lhs, const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator2> & rhs)
{
  return lhs.angle_error == rhs.angle_error &&
    lhs.dist == rhs.dist &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator1> & lhs, const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosRR_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "680e72a3b81ecb0c87017d04f4d213bd";
  }

  static const char* value(const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x680e72a3b81ecb0cULL;
  static const uint64_t static_value2 = 0x87017d04f4d213bdULL;
};

template<class ContainerAllocator>
struct DataType< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosRR_2023/lidar_aimResponse";
  }

  static const char* value(const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 angle_error\n"
"float32 dist\n"
"bool success\n"
;
  }

  static const char* value(const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_error);
      stream.next(m.dist);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidar_aimResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosRR_2023::lidar_aimResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosRR_2023::lidar_aimResponse_<ContainerAllocator>& v)
  {
    s << indent << "angle_error: ";
    Printer<float>::stream(s, indent + "  ", v.angle_error);
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSRR_2023_MESSAGE_LIDAR_AIMRESPONSE_H
