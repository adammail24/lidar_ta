// Generated by gencpp from file rosRR_2023/lidar_aimRequest.msg
// DO NOT EDIT!


#ifndef ROSRR_2023_MESSAGE_LIDAR_AIMREQUEST_H
#define ROSRR_2023_MESSAGE_LIDAR_AIMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosRR_2023
{
template <class ContainerAllocator>
struct lidar_aimRequest_
{
  typedef lidar_aimRequest_<ContainerAllocator> Type;

  lidar_aimRequest_()
    : lower_dist_th(0.0)
    , upper_dist_th(0.0)
    , type(0)  {
    }
  lidar_aimRequest_(const ContainerAllocator& _alloc)
    : lower_dist_th(0.0)
    , upper_dist_th(0.0)
    , type(0)  {
  (void)_alloc;
    }



   typedef float _lower_dist_th_type;
  _lower_dist_th_type lower_dist_th;

   typedef float _upper_dist_th_type;
  _upper_dist_th_type upper_dist_th;

   typedef uint8_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> const> ConstPtr;

}; // struct lidar_aimRequest_

typedef ::rosRR_2023::lidar_aimRequest_<std::allocator<void> > lidar_aimRequest;

typedef boost::shared_ptr< ::rosRR_2023::lidar_aimRequest > lidar_aimRequestPtr;
typedef boost::shared_ptr< ::rosRR_2023::lidar_aimRequest const> lidar_aimRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator1> & lhs, const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator2> & rhs)
{
  return lhs.lower_dist_th == rhs.lower_dist_th &&
    lhs.upper_dist_th == rhs.upper_dist_th &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator1> & lhs, const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosRR_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc9552891fed8a8e31b6b500bcba7bfe";
  }

  static const char* value(const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc9552891fed8a8eULL;
  static const uint64_t static_value2 = 0x31b6b500bcba7bfeULL;
};

template<class ContainerAllocator>
struct DataType< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosRR_2023/lidar_aimRequest";
  }

  static const char* value(const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lower_dist_th\n"
"float32 upper_dist_th\n"
"uint8 type\n"
;
  }

  static const char* value(const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lower_dist_th);
      stream.next(m.upper_dist_th);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidar_aimRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosRR_2023::lidar_aimRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosRR_2023::lidar_aimRequest_<ContainerAllocator>& v)
  {
    s << indent << "lower_dist_th: ";
    Printer<float>::stream(s, indent + "  ", v.lower_dist_th);
    s << indent << "upper_dist_th: ";
    Printer<float>::stream(s, indent + "  ", v.upper_dist_th);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSRR_2023_MESSAGE_LIDAR_AIMREQUEST_H
