# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_er/msg_ke_stm.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msg_ke_stm(genpy.Message):
  _md5sum = "c2633e3a1a163ec7dbfa4502b05291a1"
  _type = "ros_er/msg_ke_stm"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 speed_x
int16 speed_y
int16 speed_z

int16 target_slider
int16 speed_slider

int16 target_rot
int16 speed_rot

int16 target_capit
int16 speed_capit

int16 target_engsel

uint8 bit_pneumatik 

uint8 status_robot

uint8 reset_enc

int16 reset_gpos_x
int16 reset_gpos_y

int16 reset_gyro_val

uint8 buzzer

int32 pos_head

int16 acc_x
int16 acc_y
int16 acc_z

int8 tilt_kiri
int8 tilt_kanan

int16 target_carry
int16 speed_carry"""
  __slots__ = ['speed_x','speed_y','speed_z','target_slider','speed_slider','target_rot','speed_rot','target_capit','speed_capit','target_engsel','bit_pneumatik','status_robot','reset_enc','reset_gpos_x','reset_gpos_y','reset_gyro_val','buzzer','pos_head','acc_x','acc_y','acc_z','tilt_kiri','tilt_kanan','target_carry','speed_carry']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','uint8','uint8','uint8','int16','int16','int16','uint8','int32','int16','int16','int16','int8','int8','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed_x,speed_y,speed_z,target_slider,speed_slider,target_rot,speed_rot,target_capit,speed_capit,target_engsel,bit_pneumatik,status_robot,reset_enc,reset_gpos_x,reset_gpos_y,reset_gyro_val,buzzer,pos_head,acc_x,acc_y,acc_z,tilt_kiri,tilt_kanan,target_carry,speed_carry

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_ke_stm, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speed_x is None:
        self.speed_x = 0
      if self.speed_y is None:
        self.speed_y = 0
      if self.speed_z is None:
        self.speed_z = 0
      if self.target_slider is None:
        self.target_slider = 0
      if self.speed_slider is None:
        self.speed_slider = 0
      if self.target_rot is None:
        self.target_rot = 0
      if self.speed_rot is None:
        self.speed_rot = 0
      if self.target_capit is None:
        self.target_capit = 0
      if self.speed_capit is None:
        self.speed_capit = 0
      if self.target_engsel is None:
        self.target_engsel = 0
      if self.bit_pneumatik is None:
        self.bit_pneumatik = 0
      if self.status_robot is None:
        self.status_robot = 0
      if self.reset_enc is None:
        self.reset_enc = 0
      if self.reset_gpos_x is None:
        self.reset_gpos_x = 0
      if self.reset_gpos_y is None:
        self.reset_gpos_y = 0
      if self.reset_gyro_val is None:
        self.reset_gyro_val = 0
      if self.buzzer is None:
        self.buzzer = 0
      if self.pos_head is None:
        self.pos_head = 0
      if self.acc_x is None:
        self.acc_x = 0
      if self.acc_y is None:
        self.acc_y = 0
      if self.acc_z is None:
        self.acc_z = 0
      if self.tilt_kiri is None:
        self.tilt_kiri = 0
      if self.tilt_kanan is None:
        self.tilt_kanan = 0
      if self.target_carry is None:
        self.target_carry = 0
      if self.speed_carry is None:
        self.speed_carry = 0
    else:
      self.speed_x = 0
      self.speed_y = 0
      self.speed_z = 0
      self.target_slider = 0
      self.speed_slider = 0
      self.target_rot = 0
      self.speed_rot = 0
      self.target_capit = 0
      self.speed_capit = 0
      self.target_engsel = 0
      self.bit_pneumatik = 0
      self.status_robot = 0
      self.reset_enc = 0
      self.reset_gpos_x = 0
      self.reset_gpos_y = 0
      self.reset_gyro_val = 0
      self.buzzer = 0
      self.pos_head = 0
      self.acc_x = 0
      self.acc_y = 0
      self.acc_z = 0
      self.tilt_kiri = 0
      self.tilt_kanan = 0
      self.target_carry = 0
      self.speed_carry = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10h3B3hBi3h2b2h().pack(_x.speed_x, _x.speed_y, _x.speed_z, _x.target_slider, _x.speed_slider, _x.target_rot, _x.speed_rot, _x.target_capit, _x.speed_capit, _x.target_engsel, _x.bit_pneumatik, _x.status_robot, _x.reset_enc, _x.reset_gpos_x, _x.reset_gpos_y, _x.reset_gyro_val, _x.buzzer, _x.pos_head, _x.acc_x, _x.acc_y, _x.acc_z, _x.tilt_kiri, _x.tilt_kanan, _x.target_carry, _x.speed_carry))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.speed_x, _x.speed_y, _x.speed_z, _x.target_slider, _x.speed_slider, _x.target_rot, _x.speed_rot, _x.target_capit, _x.speed_capit, _x.target_engsel, _x.bit_pneumatik, _x.status_robot, _x.reset_enc, _x.reset_gpos_x, _x.reset_gpos_y, _x.reset_gyro_val, _x.buzzer, _x.pos_head, _x.acc_x, _x.acc_y, _x.acc_z, _x.tilt_kiri, _x.tilt_kanan, _x.target_carry, _x.speed_carry,) = _get_struct_10h3B3hBi3h2b2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10h3B3hBi3h2b2h().pack(_x.speed_x, _x.speed_y, _x.speed_z, _x.target_slider, _x.speed_slider, _x.target_rot, _x.speed_rot, _x.target_capit, _x.speed_capit, _x.target_engsel, _x.bit_pneumatik, _x.status_robot, _x.reset_enc, _x.reset_gpos_x, _x.reset_gpos_y, _x.reset_gyro_val, _x.buzzer, _x.pos_head, _x.acc_x, _x.acc_y, _x.acc_z, _x.tilt_kiri, _x.tilt_kanan, _x.target_carry, _x.speed_carry))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.speed_x, _x.speed_y, _x.speed_z, _x.target_slider, _x.speed_slider, _x.target_rot, _x.speed_rot, _x.target_capit, _x.speed_capit, _x.target_engsel, _x.bit_pneumatik, _x.status_robot, _x.reset_enc, _x.reset_gpos_x, _x.reset_gpos_y, _x.reset_gyro_val, _x.buzzer, _x.pos_head, _x.acc_x, _x.acc_y, _x.acc_z, _x.tilt_kiri, _x.tilt_kanan, _x.target_carry, _x.speed_carry,) = _get_struct_10h3B3hBi3h2b2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10h3B3hBi3h2b2h = None
def _get_struct_10h3B3hBi3h2b2h():
    global _struct_10h3B3hBi3h2b2h
    if _struct_10h3B3hBi3h2b2h is None:
        _struct_10h3B3hBi3h2b2h = struct.Struct("<10h3B3hBi3h2b2h")
    return _struct_10h3B3hBi3h2b2h
