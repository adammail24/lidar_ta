# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_er/tuning.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class tuning(genpy.Message):
  _md5sum = "258fcfb474f715e8b678ea8d146e1b92"
  _type = "ros_er/tuning"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 val_int
float32 val_float

int8 counter
bool is_float

uint8 ctr_msg"""
  __slots__ = ['val_int','val_float','counter','is_float','ctr_msg']
  _slot_types = ['int32','float32','int8','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       val_int,val_float,counter,is_float,ctr_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tuning, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.val_int is None:
        self.val_int = 0
      if self.val_float is None:
        self.val_float = 0.
      if self.counter is None:
        self.counter = 0
      if self.is_float is None:
        self.is_float = False
      if self.ctr_msg is None:
        self.ctr_msg = 0
    else:
      self.val_int = 0
      self.val_float = 0.
      self.counter = 0
      self.is_float = False
      self.ctr_msg = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ifb2B().pack(_x.val_int, _x.val_float, _x.counter, _x.is_float, _x.ctr_msg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.val_int, _x.val_float, _x.counter, _x.is_float, _x.ctr_msg,) = _get_struct_ifb2B().unpack(str[start:end])
      self.is_float = bool(self.is_float)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ifb2B().pack(_x.val_int, _x.val_float, _x.counter, _x.is_float, _x.ctr_msg))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.val_int, _x.val_float, _x.counter, _x.is_float, _x.ctr_msg,) = _get_struct_ifb2B().unpack(str[start:end])
      self.is_float = bool(self.is_float)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ifb2B = None
def _get_struct_ifb2B():
    global _struct_ifb2B
    if _struct_ifb2B is None:
        _struct_ifb2B = struct.Struct("<ifb2B")
    return _struct_ifb2B
