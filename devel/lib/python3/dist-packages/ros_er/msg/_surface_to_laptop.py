# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_er/surface_to_laptop.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class surface_to_laptop(genpy.Message):
  _md5sum = "6b07eb02f2a67188d7d9858575aca1a0"
  _type = "ros_er/surface_to_laptop"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 speed_x
int16 speed_y
int16 speed_z

float32 odom_x
float32 odom_y
float32 gyro_full

int16 target_speed_x
int16 target_speed_y
int16 target_speed_z

float32 laser
float32 laser_hpf

int8 command_type
int16 m_ctr

float32 time_stamp
"""
  __slots__ = ['speed_x','speed_y','speed_z','odom_x','odom_y','gyro_full','target_speed_x','target_speed_y','target_speed_z','laser','laser_hpf','command_type','m_ctr','time_stamp']
  _slot_types = ['int16','int16','int16','float32','float32','float32','int16','int16','int16','float32','float32','int8','int16','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed_x,speed_y,speed_z,odom_x,odom_y,gyro_full,target_speed_x,target_speed_y,target_speed_z,laser,laser_hpf,command_type,m_ctr,time_stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(surface_to_laptop, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speed_x is None:
        self.speed_x = 0
      if self.speed_y is None:
        self.speed_y = 0
      if self.speed_z is None:
        self.speed_z = 0
      if self.odom_x is None:
        self.odom_x = 0.
      if self.odom_y is None:
        self.odom_y = 0.
      if self.gyro_full is None:
        self.gyro_full = 0.
      if self.target_speed_x is None:
        self.target_speed_x = 0
      if self.target_speed_y is None:
        self.target_speed_y = 0
      if self.target_speed_z is None:
        self.target_speed_z = 0
      if self.laser is None:
        self.laser = 0.
      if self.laser_hpf is None:
        self.laser_hpf = 0.
      if self.command_type is None:
        self.command_type = 0
      if self.m_ctr is None:
        self.m_ctr = 0
      if self.time_stamp is None:
        self.time_stamp = 0.
    else:
      self.speed_x = 0
      self.speed_y = 0
      self.speed_z = 0
      self.odom_x = 0.
      self.odom_y = 0.
      self.gyro_full = 0.
      self.target_speed_x = 0
      self.target_speed_y = 0
      self.target_speed_z = 0
      self.laser = 0.
      self.laser_hpf = 0.
      self.command_type = 0
      self.m_ctr = 0
      self.time_stamp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3h3f3h2fbhf().pack(_x.speed_x, _x.speed_y, _x.speed_z, _x.odom_x, _x.odom_y, _x.gyro_full, _x.target_speed_x, _x.target_speed_y, _x.target_speed_z, _x.laser, _x.laser_hpf, _x.command_type, _x.m_ctr, _x.time_stamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 39
      (_x.speed_x, _x.speed_y, _x.speed_z, _x.odom_x, _x.odom_y, _x.gyro_full, _x.target_speed_x, _x.target_speed_y, _x.target_speed_z, _x.laser, _x.laser_hpf, _x.command_type, _x.m_ctr, _x.time_stamp,) = _get_struct_3h3f3h2fbhf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3h3f3h2fbhf().pack(_x.speed_x, _x.speed_y, _x.speed_z, _x.odom_x, _x.odom_y, _x.gyro_full, _x.target_speed_x, _x.target_speed_y, _x.target_speed_z, _x.laser, _x.laser_hpf, _x.command_type, _x.m_ctr, _x.time_stamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 39
      (_x.speed_x, _x.speed_y, _x.speed_z, _x.odom_x, _x.odom_y, _x.gyro_full, _x.target_speed_x, _x.target_speed_y, _x.target_speed_z, _x.laser, _x.laser_hpf, _x.command_type, _x.m_ctr, _x.time_stamp,) = _get_struct_3h3f3h2fbhf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3h3f3h2fbhf = None
def _get_struct_3h3f3h2fbhf():
    global _struct_3h3f3h2fbhf
    if _struct_3h3f3h2fbhf is None:
        _struct_3h3f3h2fbhf = struct.Struct("<3h3f3h2fbhf")
    return _struct_3h3f3h2fbhf
