# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_abu/js.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class js(genpy.Message):
  _md5sum = "27307fc51b0d7a911c746c6fbd3def00"
  _type = "robot_abu/js"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 button
int32 left_js_x
int32 left_js_y
uint16 right_js_x
uint16 right_js_y
int16 kiri_kanan
int16 atas_bawah
int32 l2
int32 r2
uint8 event"""
  __slots__ = ['button','left_js_x','left_js_y','right_js_x','right_js_y','kiri_kanan','atas_bawah','l2','r2','event']
  _slot_types = ['uint32','int32','int32','uint16','uint16','int16','int16','int32','int32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       button,left_js_x,left_js_y,right_js_x,right_js_y,kiri_kanan,atas_bawah,l2,r2,event

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(js, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.button is None:
        self.button = 0
      if self.left_js_x is None:
        self.left_js_x = 0
      if self.left_js_y is None:
        self.left_js_y = 0
      if self.right_js_x is None:
        self.right_js_x = 0
      if self.right_js_y is None:
        self.right_js_y = 0
      if self.kiri_kanan is None:
        self.kiri_kanan = 0
      if self.atas_bawah is None:
        self.atas_bawah = 0
      if self.l2 is None:
        self.l2 = 0
      if self.r2 is None:
        self.r2 = 0
      if self.event is None:
        self.event = 0
    else:
      self.button = 0
      self.left_js_x = 0
      self.left_js_y = 0
      self.right_js_x = 0
      self.right_js_y = 0
      self.kiri_kanan = 0
      self.atas_bawah = 0
      self.l2 = 0
      self.r2 = 0
      self.event = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2i2H2h2iB().pack(_x.button, _x.left_js_x, _x.left_js_y, _x.right_js_x, _x.right_js_y, _x.kiri_kanan, _x.atas_bawah, _x.l2, _x.r2, _x.event))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.button, _x.left_js_x, _x.left_js_y, _x.right_js_x, _x.right_js_y, _x.kiri_kanan, _x.atas_bawah, _x.l2, _x.r2, _x.event,) = _get_struct_I2i2H2h2iB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2i2H2h2iB().pack(_x.button, _x.left_js_x, _x.left_js_y, _x.right_js_x, _x.right_js_y, _x.kiri_kanan, _x.atas_bawah, _x.l2, _x.r2, _x.event))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.button, _x.left_js_x, _x.left_js_y, _x.right_js_x, _x.right_js_y, _x.kiri_kanan, _x.atas_bawah, _x.l2, _x.r2, _x.event,) = _get_struct_I2i2H2h2iB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2i2H2h2iB = None
def _get_struct_I2i2H2h2iB():
    global _struct_I2i2H2h2iB
    if _struct_I2i2H2h2iB is None:
        _struct_I2i2H2h2iB = struct.Struct("<I2i2H2h2iB")
    return _struct_I2i2H2h2iB
